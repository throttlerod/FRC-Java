// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1332.TestBot2016.subsystems;

import org.usfirst.frc1332.TestBot2016.RobotMap;
import org.usfirst.frc1332.TestBot2016.commands.*;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveBase extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController lF = RobotMap.driveBaseLF;
    private final SpeedController lR = RobotMap.driveBaseLR;
    private final SpeedController rF = RobotMap.driveBaseRF;
    private final SpeedController rR = RobotMap.driveBaseRR;
    private final RobotDrive robotDrive41 = RobotMap.driveBaseRobotDrive41;
    private final AnalogGyro analogGyro0 = RobotMap.driveBaseAnalogGyro0;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new ArcadeDrive());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    double Kp = 0.03;
    
    public void ArcadeDrive (Joystick arcadeStick){
    	analogGyro0.reset();
        while (isArcadeDrive()) {
            double angle = analogGyro0.getAngle(); // get current heading
            robotDrive41.drive(-1.0, -angle*Kp); // drive towards heading 0
            Timer.delay(0.004);
 robotDrive41.arcadeDrive(arcadeStick, true); 
    }
        robotDrive41.drive(0.0, 0.0);
    }

 private boolean isArcadeDrive() {
 return false;
 }

    
}

